{
    "Intro":    "// Can you spot the two errors\n// in this program?\n    public class MaybeAdd {\n     //@ requires a > 0;\n     //@ requires b > 0;\n     //@ ensures \result == a+b;\n     public static int add(int a, int b){\n         return a-b;\n     }\n     \n    public static void main(String args[]){\n         System.out.println(add(2,3));\n     }\n }",
    "BinarySearch": "class BinarySearch {\n\n    /*@ public normal_behaviour\n      @   requires (\\forall int x; (\\forall int y; 0 <= x && x < y && y < a.length; a[x] <= a[y]));\n      @   ensures ((\\exists int x; 0 <= x && x < a.length; a[x] == v) ? a[\\result] == v : \\result == -1);\n      @*/\n    static /*@pure@*/ int search(int[] a, int v) {\n        int l = 0;\n        int r = a.length - 1;\n\n        if(a.length == 0) return -1;\n        if(a.length == 1) return a[0] == v ? 0 : -1;\n\n        /*@ loop_invariant 0 <= l && l < r && r < a.length\n          @                && (\\forall int x; 0 <= x && x < l; a[x] < v)\n          @                && (\\forall int x; r < x && x < a.length; v < a[x]);\n          @ assignable \\nothing;\n          @ decreases r - l;\n          @*/\n        while(r > l + 1) {\n            int mid = l + (r - l) / 2;\n            if(a[mid] == v) {\n               return mid;\n            } else if(a[mid] > v) {\n               r = mid;\n            } else {\n               l = mid;\n            }\n        }\n\n        if(a[l] == v) return l;\n        if(a[r] == v) return r;\n        return -1;\n    }\n}"
}

